# Напишіть програму, в якій користувач вводить пароль і якщо він співпадає із наперед визначеним паролем для цього користувача, то виводиться повідомлення Password accepted.. У іншому випадку повідомлення буде Sorry, that is the wrong password..

# correct_password = "mypassword"
# user_password = input("Enter your password: ")
# if user_password == correct_password:
#     print("Password accepted.")
# else:
#     print("Sorry, that is the wrong password.")



# 1.Користувачем вводиться два імені. Використовуючи конструкцію розгалуження програма повинна вивести імена в алфавітному порядку.

# name1 = input("Enter first name: ")
# name2 = input("Enter second name: ")
# if name1 < name2:
#     print(name1)
#     print(name2)
# else:
#     print(name2)
#     print(name1)




# 2.Напишіть програму, яка виводить назви введених чисел. 

# number_names = {
#     0: "zero",
#     1: "one",
#     2: "two",
#     3: "three",
#     4: "four",
#     5: "five",
#     6: "six",
#     7: "seven",
#     8: "eight",
#     9: "nine"
# }

# n = int(input("How many numbers? "))
# for _ in range(n):
#     num = int(input())
#     if 0 <= num <= 9:
#         print(number_names[num])
#     else:
#         print("Number out of range")



# 3.Користувач вводить ціле число. Якщо це число або 1 або 2 або 3, то виводиться повідомлення - назва числа, відповідно, One, Two, Three. В усіх інших випадках виводиться слово Unknown.

# n = int(input())
# if n == 1:
#     print("One")
# elif n == 2:
#     print("Two")
# elif n == 3:
#     print("Three")
# else:
#     print("Unknown")



# 4.Користувач вводить дві різних англійські літери в окремих рядках. Напишіть програму, яка виводить повідомлення про місце розташування однієї літери відносно іншої у алфавіті.

# letter1 = input("Enter first letter: ")
# letter2 = input("Enter second letter: ")
# if letter1 < letter2:
#     print(f"{letter1} comes before {letter2} in the alphabet")
# else:
#     print(f"{letter1} comes after {letter2} in the alphabet")




# 5.Напишіть програму, в якій користувач вводить значення температури, і, якщо це значення менше або дорівнює 0 градусів Цельсія, необхідно вивести повідомлення A cold, isn’t it?. Якщо ж температура становить більше 0 і менше 10 градусів Цельсія повідомлення буде Cool., у інших випадках Nice weather we’re having..


# temp = float(input("Enter temperature in Celsius: "))

# if temp <= 0:
#     print("A cold, isn’t it?")
# elif 0 < temp < 10:
#     print("Cool.")
# else:
#     print("Nice weather we’re having..")




# 6.Напишіть програму для знаходження коренів квадратного рівняння a*x2 + b*x + c = 0. Користувач вводить значення коефіцієнтів a, b, c. У вхідних даних наведено три пари вхідних значень коефіцієнтів, а у вихідних даних - відповідні повідомлення про кількість коренів або їх відсутність.
# Вхідні дані:
# 8
# 4
# 2
# 3.6
# 10
# -3
# 2
# 4
# 2
# Вихідні дані:
# No roots.
# 0.27 and -3.05
# -1.00

# def solve_quadratic(a, b, c):
#     D = b**2 - 4*a*c
#     if D < 0:
#         print("No roots.")
#     elif D == 0:
#         x = -b / (2*a)
#         print(f"{x:.2f}")
#     else:
#         x1 = (-b + math.sqrt(D)) / (2*a)
#         x2 = (-b - math.sqrt(D)) / (2*a)
#         if x1 > x2:
#            x1, x2 = x2, x1
#         print(f"{x1:.2f} and {x2:.2f}")
# for _ in range(3):
#     a = float(input())
#     b = float(input())
#     c = float(input())
#     solve_quadratic(a, b, c)


# Середній рівень

# 1 .Визначте назву геометричної фігури за введеною кількістю її сторін. Програма повинна підтримувати фігури від 3 до 6 сторін. Якщо введена кількість сторін поза межами цього діапазону, програма повинна відображати відповідне повідомлення.

# n = int(input())
# if n == 3:
#     print("Triangle")
# elif n == 4:
#     print("Quadrilateral")
# elif n == 5:
#     print("Pentagon")
# elif n == 6:
#     print("Hexagon")
# else:
#     print("Unsupported number of sides")

# 2.Ігрове поле рулетки поділено на номери від 0 до 36, які мають чорний, червоний або зелений кольори. Номер 0 має зелений колір, для номерів від 1 до 10, непарні номери - червоні, а парні - чорні. Непарні номери від 11 до 18 - чорні, а парні номери - червоні. Непарні номери від 19 до 28 - червоні, а парні номери - чорні. Непарні номери від 29 до 36 - чорні, а парні номери - червоні. Напишіть програму, яка отримує номер (число від 0 до 36) та показує, чи є номер зеленим, червоним або чорним. Програма повинна враховувати варіант, якщо користувач вводить номер, який знаходиться за межами діапазону від 0 до 36.

# n = int(input())
# if n < 0 or n > 36:
#     print("Invalid number")
# elif n == 0:
#     print("green")
# elif 1 <= n <= 10:
#     if n % 2 == 0:
#        print("black")
#     else:
#        print("red")
# elif 11 <= n <= 18:
#     if n % 2 == 0:
#        print("red")
#     else:
#        print("black")
# elif 19 <= n <= 28:
#     if n % 2 == 0:
#        print("black")
#     else:
#        print("red")
# elif 29 <= n <= 36:
#     if n % 2 == 0:
#        print("red")
#     else:
#        print("black")



# 3.Дано дві точки: A (x1, y1) і B (x2, y2). Напишіть програму, яка визначає, яка із точок знаходиться далі від початку координат.

#  Вхідні дані:
#  1
#  2
#  3
#  2
#  4
#  4
#  4
#  4

#  Вихідні дані:
#  B
#  The distance is the same 

# for _ in range(2):
#     x1 = float(input())
#     y1 = float(input())
#     x2 = float(input())
#     y2 = float(input())
#     d1 = math.sqrt(x1**2 + y1**2)
#     d2 = math.sqrt(x2**2 + y2**2)
#  if d1 > d2:
#       print("A")
#     elif d2 > d1:
#       print("B")
#     else:
#       print("The distance is the same")



# 4.Дано чотирицифрове число. Замінити усі парні цифри числа на символ * і вивести число.
# Вхідні дані:
# 2358
# 2227
# 1353
# Вихідні дані:
# *35*
# ***7
# 1353

# for _ in range(3):
#     n = input()
#     result = ""
#     for ch in n:
#         if int(ch) % 2 == 0:
#            result += "*"
#         else:
#             result += ch
#     print(result)



# 5.Напишіть програму, щоб визначити, чи задане ціле число (вводиться користувачем) парне або непарне.
# Вхідні дані:
# 2
# 5
# 11
# Вихідні дані:
# True
# False
# False

# for _ in range(3):
#     n = int(input())
#     print(n % 2 == 0)



# 6.Напишіть програму для знаходження коренів квадратного рівняння a*x2 + b*x + c = 0. Користувач вводить значення коефіцієнтів a, b, c. У вхідних даних наведено три пари вхідних значень коефіцієнтів, а у вихідних даних - відповідні повідомлення про кількість коренів або їх відсутність.
# Вхідні дані:
# 8
# 4
# 2
# 3.6
# 10
# -3
# 2
# 4
# 2
# Вихідні дані:
# No roots.
# 0.27 and -3.05
# -1.00


# def solve_quadratic(a, b, c):
#     D = b**2 - 4*a*c  # дискримінант
#     if D < 0:
#         print("No roots.")
#     elif D == 0:
#         x = -b / (2*a)
#         print(f"{x:.2f}")
#     else:
#         x1 = (-b + math.sqrt(D)) / (2*a)
#         x2 = (-b - math.sqrt(D)) / (2*a)
#         # щоб менший корінь йшов першим
#         if x1 > x2:
#             x1, x2 = x2, x1
#         print(f"{x1:.2f} and {x2:.2f}")
# for _ in range(3):
#     a = float(input())
#     b = float(input())
#     c = float(input())
#     solve_quadratic(a, b, c)



# 7.Напишіть програму для знаходження коренів квадратного рівняння a*x2 + b*x + c = 0. Користувач вводить значення коефіцієнтів a, b, c. У вхідних даних наведено три пари вхідних значень коефіцієнтів, а у вихідних даних - відповідні повідомлення про кількість коренів або їх відсутність.
# Вхідні дані:
# 8
# 4
# 2
# 3.6
# 10
# -3
# 2
# 4
# 2
# Вихідні дані:
# No roots.
# 0.27 and -3.05
# -1.00


# def solve(a, b, c):
#     D = b**2 - 4*a*
#     if D < 0:
#         print("No roots.")
#     elif D == 0:
#         x = -b / (2 * a)
#         print(f"{x:.2f}")
#     else:
#         x1 = (-b + math.sqrt(D)) / (2 * a)
#         x2 = (-b - math.sqrt(D)) / (2 * a)
#         if x1 > x2:
#             x1, x2 = x2, x1
#         print(f"{x1:.2f} and {x2:.2f}")
#         for _ in range(3):
#     a = float(input())
#     b = float(input())
#     c = float(input())
#     solve(a, b, c)



# 8.Напишіть програму, яка по введеному числу n від 1 до 9 виводить на екран n пінгвінів з відповідним номером - число від 1 до n. Зображення одного пінгвіна має розмір 5 x 9 символів, між двома сусідніми пінгвінами також є порожній (з пропусків) стовпець. Дозволяється вивести порожній стовпець після останнього пінгвіна. Для спрощення малювання скопіюйте пінгвіна із вихідних даних. Врахуйте, що виведення на екран виконується порядково, а не «попінгвінно».
#  Вхідні дані: 
#  4 
#  Вихідні дані: 
#     _~_        _~_        _~_        _~_ 
#    (o o)      (o o)      (o o)      (o o) 
#   /  V  \    /  V  \    /  V  \    /  V  \ 
#  /(  1  )\  /(  2  )\  /(  3  )\  /(  4  )\ 
#    ^^ ^^      ^^ ^^      ^^ ^^      ^^ ^^


# n = int(input())
# print("    _~_     " * n)
# print("   (o o)    " * n)
# print("  /  V  \\   " * n)
# for i in range(1, n + 1):
#     print(f"/(  {i}  )\\ ", end="")
# print()
# print("   ^^ ^^    " * n)



# 9.У рядку є кілька слів, розділених одним або декількома пропусками. Потрібно прибрати з тексту зайві пропуски: два і більше пропусків поспіль, а також всі пропуски на початку і в кінці рядка. На вхід програмі подається рядок, що складається не більше ніж з 255 символів. Надрукувати новий рядок.
# Вхідні дані:
#    Beyond the green swelling hills of the Mittel Land rose mighty slopes of forest up to the lofty steeps of the Carpathians themselves
# Вихідні дані:
# Beyond the green swelling hills of the Mittel Land rose mighty slopes of forest up to the lofty steeps of the Carpathians themselves


# s = input()
# s = ' '.join(s.split())
# print(s)



# 10.Дано рядок, що складається з n цифр (тобто одноцифрових чисел), між якими стоїть n-1 знаків операцій, кожна з яких може бути або +, або -. Обчисліть значення цього виразу. Програма має надрукувати результат обчислення цього виразу.
# Вхідні дані:
# 5-3+1
# 6+3-2
# Вихідні дані:
# 3
# 7

# s = input()
# result = eval(s)
# print(result)




# 11.Напишіть програму, на вхід якої даються чотири числа a, b, c і d, кожне у своєму рядку. Програма повинна вивести фрагмент таблиці множення для всіх чисел відрізка [a; b] на всі числа відрізка [c; d]. Числа a, b, c і d є натуральними і не перевищують 10, a ≤ b, c ≤ d. Дотримуйтесь формату виведення як у вихідних даних. Для поділу елементів всередині рядка використовуйте \t - символ табуляції. Зауважте, що лівим стовпчиком і верхнім рядком виводяться самі числа із заданих відрізків.
# Вхідні дані:
# 1
# 4
# 2
# 5
# Вихідні дані:
# 	2	3	4	5
# 1	2	3	4	5
# 2	4	6	8	10
# 3	6	9	12	15
# 4	8	12	16	20

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# print("\t", end="")
# for j in range(c, d + 1):
#     print(j, end="\t")
# print()
# for i in range(a, b + 1):
#     print(i, end="\t")
#     for j in range(c, d + 1):
#         print(i * j, end="\t")
#     print()



# 12.Напишіть програму для друку літери A за допомогою введеного користувачем символа.
#  Вхідні дані: 
#  * 
#  Вихідні дані: 
#    *** 
#   *   * 
#   *   * 
#   ***** 
#   *   * 
#   *   * 
#   *   * 

# a = input("Введіть символ: ")
# print("  " + a*3)
# print(" " + a + "   " + a)
# print(" " + a + "   " + a)
# print(" " + a*5)
# print(" " + a + "   " + a)
# print(" " + a + "   " + a)
# print(" " + a + "   " + a)


# 13.Напишіть програму, яка визначає, чи є у введеному рядку десяткові цифри, і виводить найбільше число, яке можна скласти з цих цифр. Провідних нулів у числі бути не повинно (за винятком числа 0, запис якого містить рівно одну цифру). Гарантовано, що у рядку є принаймні одна цифра. Вхідний рядок містить довільні символи. Програма повинна вивести найбільше число, яке можна скласти з присутніх в рядку десяткових цифр.

# Вхідні дані:
# Release Date: July 27, 2008
# Last Updated: February 22, 2018
# Вихідні дані:
# 872200
# 822210

# variant

# s = input("Введіть рядок: ")
# digits = [x for x in s if x.isdigit()]
# digits.sort(reverse=True)
# number = ''.join(digits)
# if set(number) == {'0'}:
#     number = '0'
#     print(number)

