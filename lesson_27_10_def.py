Tasks for lesson on the topic of "Function def"

Beginner level

# 1.Напишіть функцію, яка отримує ім’я і друкує вітальне повідомлення Hello, <name>.
# name = "Oksana"
# def name_hello(name"NON"):
#     print(f"Hello, {name}!")

# def name_hello(name"NON"):
#     return f"Hello, {name}!"

# print(name_hello())
# print(name_hello(name))


# 2. Напишіть функцію, яка отримує рядок і ціле число n та повертає n копій заданого рядка.

# def copy_string(text, n):
#     return (" " + text + " ") * n

# text = input("Enter text:,")
# n = int(input("Enter n:"))
# print(copy_string(text, n), end=" ")


# 3. Напишіть функцію для обчислення суми двох цілих чисел.

# def sum_a_b(a, b):
#     return a + b

# num_1 = int(input("Num_1: "))
# num_2 = int(input("Num_2: "))

# prunt(sum_a_b(num_1, num_2))

# variant 2 (коли вручну прописуємо значення а і в)

# def sum_a_b(a, b):
#     return a + b

# num_1 = int(input("Num_1: "))
# num_2 = int(input("Num_2: "))

# prunt(sum_a_b(num_1, a = num_2))



# 4. Напишіть функцію для отримання рядка з перших n символів іншого рядка. Якщо довжина рядка менше n, поверніть початковий рядок.

def n_letter(word, n):
    if len(word) < n:
        return word
    else:
        return word[:n]

def n_letter(word, n):
    if len(word) < n:
        return word
    return word[:n]
    # print(1)
    
string = "letter"
n = 3
print(n_letter("letter", 3)) 

# "letter"

# 5. Напишіть функцію для визначення найбільшого з трьох цілих чисел з використанянм вбудованої функції max().

def max_of_three(a, b, c):
    return max(a, b, c)


print(max_of_three(5, 12, 9))   # 12
print(max_of_three(-3, -7, -1)) # -1



# 6. Напишіть функцію для створення позначок тегів HTML навколо введених рядків. Функція отримує назву тега HTML і рядок, який необхідно помістити у відповідні теги.

Вхідні дані:

strong Python


Вихідні дані:

<strong>Python</strong>


def teg_html (teg, text0):
    return f"<{teg}>{text}</{teg}>"

text = input("Enter text: ")


#1  

# teg, string = text.split()

#2

teg = text.split()[0]
string = " ".join(text.split()[1:])

print(teg_html(teg, string))


# 7.Напишіть функцію, яка повертає назву пори року для введеного значення номера місяця.

def season(month):
    if month in [12, 1, 2]:
        return "Зима"
    elif month in [3, 4, 5]:
        return "Весна"
    elif month in [6, 7, 8]:
        return "Літо"
    elif month in [9, 10, 11]:
        return "Осінь"
    else:
        return "Невірний номер місяця"
 

 #2

 def season(month):
    return {
        12: "Зима", 1: "Зима", 2: "Зима",
        3: "Весна", 4: "Весна", 5: "Весна",
        6: "Літо", 7: "Літо", 8: "Літо",
        9: "Осінь", 10: "Осінь", 11: "Осінь"
    }.get(month, "Невірний номер місяця")


#приклад

print(season(1))   # Зима
print(season(4))   # Весна
print(season(7))   # Літо
print(season(10))  # Осінь
print(season(13))  # Невірний номер місяця


# 8. Напишіть функцію для створення гістограми (наприклад, у вигляді *) із заданого списку цілих чисел як у вихідних даних. Формат введення списку чисел як у вхідних даних.

Вхідні дані:

2,7,1,4,2,3,9,3
Вихідні дані:

**
*******
*
****
**
***
*********
***
Middle level


def histogram(numbers):
    for n in numbers:
        print('*' * n)

data = [2,7,1,4,2,3,9,3]
histogram(data)

**
*******
*
****
**
***
*********
***



# 9. Напишіть функцію для визначення, чи рік високосний чи ні.

def is_leap(year):
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        return True
    else:
        return False

print(is_leap(2020))  # True
print(is_leap(1900))  # False
print(is_leap(2000))  # True
print(is_leap(2023))  # False


# 10. Напишіть функцію, яка отримує значення середньомісячної кількості опадів по місяцях (в мм) і повертає загальний обсяг опадів протягом року, середньорічну кількість опадів, назви місяців та значення з найвищим та найменшим числом опадів протягом року.

Вхідні дані:

22 22 24 49 72 98 101 82 51 40 36 24
Вихідні дані:

(621.0, 51.75, (101.0, 'July'), (22.0, 'January'))

def rainfal_statistics(values):
    months = [
        "January", "February",
        "March", "April", "May",
        "June", "July", "August", 
        "September", "October", "November",
        "December"
        ]
    
    rain = list(map(float, values.split()))
   
    total = sum(rain)

    average = total / 12 # len(rain) = 12

    max_rain = max(rain)
    min_rain = min(rain)

    max_month = [rain.index(max_rain)]
    min_month = [rain.index(min_rain)]

    return (total, average, (max_rain, max_month),
           (min_rain, min_month))

data - "22 22 24 49 72 98 101 82 51 40 36 24"

result = rainfal_statistics(data)

print(result)


задача:

[1, 1, 4, 5].index(1)
[1, 4, 5]
[1,1,4,5][1]


rain = [1, 1, 4, 5]

print("Список:", rain)

print("Індекс першого елемента '1':", rain.index(1))
print("Елемент з індексом 1:", rain[1])
print("Новий список без першого елемента:", rain[1:])


# 11. На стадіоні є три категорії місць для сидіння: місця класу A коштують a грошових одиниць, місця класу B коштують b грошових одиниць, а місця класу C - c грошових одиниць. Напишіть першу функцію, яка запитує скільки продано квитків на кожний клас місць, і другу функцію, яка відображає суму отриманого доходу від продажу квитків на кожен клас окремо і загалом. Формати введення і виведення такі, як у вхідних і вихідних даних.

Вхідні дані:

A
20.50
45
B
15.75
30
C
10.55
15
Вихідні дані:

({'A': 922.5, 'B': 472.5, 'C': 158.25}, 1553.25)


def tickets():
    A = 20.50 * 45
    B = 15.75 * 30
    C = 10.55 * 15
    total = A + B + C
    print({'A': A, 'B': B, 'C': C}, total)


# 12.Напишіть функцію, яка перевіряє, чи рядок є паліндром чи ні. Регістр літер, пропуски і знаки пунктуації не враховувати.
Паліндром - це слово, фраза або послідовність, яка читається так само як зліва направо, так і справа наліво.

Hard level

def is_palindrome(text):
    clean = ''.join(ch.lower() for ch in text if ch.isalnum())
    return clean == clean[::-1]

# 13. Напишіть рекурсивну функцію, яка обчислює суму цілих чисел a і b. З арифметичних операцій використовується тільки додавання одиниці і віднімання одиниці.

def add(a, b):
    if b == 0:
        return a
    if b > 0:
        return add(a + 1, b - 1)
    else:
        return add(a - 1, b + 1)
    
# 2

def add(a, b):
    # базовий випадок: якщо b = 0, то результат дорівнює a
    if b == 0:
        return a
    
    # якщо b додатнє, додаємо 1 до a і зменшуємо b на 1
    elif b > 0:
        next_a = a + 1
        next_b = b - 1
        return add(next_a, next_b)
    
    # якщо b від'ємне, віднімаємо 1 від a і збільшуємо b на 1
    else:  # b < 0
        next_a = a - 1
        next_b = b + 1
        return add(next_a, next_b)


# 14. Дано послідовність цілих чисел, що закінчується числом 0. Напишіть рекурсивну функцію, яка друкує цю послідовність в зворотному порядку. При розв’язуванні цього завдання не можна користуватися списками.

def reverse_print():
    n = int(input())
    if n == 0:
        return
    reverse_print()  # рекурсивно читаємо наступне число
    print(n)         # друкуємо після рекурсії → виходить у зворотному порядку


# 15. У кожної кредитної картки є номер, який надрукований на ній, а також інший номер, вбудований у магнітну стрічку із зворотного боку картки. Цей номер також зберігається у певній базі даних для того, щоб коли вашою карткою розраховуються за покупку, банк знав, з якого рахунку cписувати гроші. У світі багато людей з кредитними картками, і тому ці номери доволі великі: American Express використовує номери із 15 розрядів, MasterCard - з 16, Visa - з 13 або 16. Ці розряди - десяткові (від 0 до 9). Номери кредитних карт мають певну структуру. Номери карток American Express починаються з 34 чи 37; номери карт MasterCard починаються з 51, 52, 53, 54 чи 55 (формально, вони можуть починатись і з деяких інших чисел, але ми не звертатимемо на це уваги в межах нашої задачі); номери карт Visa починаються з 4. Також номери карт мають вбудовану у них контрольну суму, що обраховується за допомогою математичної формули. Тож яка це секретна формула? Більшість карток використовують алгоритм, створений Гансом Петером Луном з IBM (Алгоритм Луна ). Відповідно до цього алгоритму, ви можете перевірити, чи номер кредитної картки є синтаксично коректним, наступним чином. Рядки довжиною 1 або менше не є дійсними. Пропуски дозволені для введення, але їх необхідно видалити перед перевіркою. Усі інші нецифрові символи заборонені.

Приклад 1: дійсний номер кредитної картки
4539 1488 0343 6467
Перший крок алгоритму Луна - це подвоєння кожної другої цифри, починаючи справа:
4_3_ 1_8_ 0_4_ 6_6_
Якщо подвоєння числа є числом, що перевищує 9, необхідно відняти 9 від добутку.
Результати нашого подвоєння, розставлені на свої місця:
8569 2478 0383 3437
Далі необхідно підсумувати всі цифри:
8+5+6+9+2+4+7+8+0+3+8+3+3+4+3+7 = 80
Якщо сума націло ділиться на 10, то число дійсне. Цей номер дійсний!  



Приклад 2: недійсний номер кредитної картки
8273 1232 7352 0569
Подвоєння кожної другої цифри, починаючи справа
7253 2262 5312 0539
Сума цифр
7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57
57 націло не ділиться на 10, тому це число недійсне.  


# 16.Напишіть функцію(ї) для валідації номера кредитної картки за алгоритмом Луна і виведення приналежності картки для трьох компаній (American Express, MasterCard, Visa) як у вихідних даних. У разі некоректності номера або невідповідності переліченим компаніям, вивести повідомлення INVALID.



# 17. У кожної кредитної картки є номер, який надрукований на ній, а також інший номер, вбудований у магнітну стрічку із зворотного боку картки. Цей номер також зберігається у певній базі даних для того, щоб коли вашою карткою розраховуються за покупку, банк знав, з якого рахунку cписувати гроші. У світі багато людей з кредитними картками, і тому ці номери доволі великі: American Express використовує номери із 15 розрядів, MasterCard - з 16, Visa - з 13 або 16. Ці розряди - десяткові (від 0 до 9). Номери кредитних карт мають певну структуру. Номери карток American Express починаються з 34 чи 37; номери карт MasterCard починаються з 51, 52, 53, 54 чи 55 (формально, вони можуть починатись і з деяких інших чисел, але ми не звертатимемо на це уваги в межах нашої задачі); номери карт Visa починаються з 4. Також номери карт мають вбудовану у них контрольну суму, що обраховується за допомогою математичної формули. Тож яка це секретна формула? Більшість карток використовують алгоритм, створений Гансом Петером Луном з IBM (Алгоритм Луна ). Відповідно до цього алгоритму, ви можете перевірити, чи номер кредитної картки є синтаксично коректним, наступним чином. Рядки довжиною 1 або менше не є дійсними. Пропуски дозволені для введення, але їх необхідно видалити перед перевіркою. Усі інші нецифрові символи заборонені.